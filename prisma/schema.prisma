generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users table (Clerk authentication)
model User {
  id        String   @id @default(uuid()) @db.Uuid
  clerkId   String   @unique @map("clerk_id")
  name      String?
  email     String?
  avatarUrl String?  @map("avatar_url")
  role      String   @default("buyer")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  shops       Shop[]
  orders      Order[]
  reviews     Review[]
  banks       Bank[]
  withdrawals Withdrawal[]

  @@map("users")
}

// Shops table
model Shop {
  id          String   @id @default(uuid()) @db.Uuid
  ownerId     String   @map("owner_id") @db.Uuid
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  name        String
  bio         String?
  avatarUrl   String?  @map("avatar_url")
  totalSales  Int      @default(0) @map("total_sales")
  allProducts Int      @default(0) @map("all_products")
  ratings     Float    @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  prompts Prompt[]

  @@index([ownerId])
  @@map("shops")
}

// Prompts table (with FTS support via trigger)
model Prompt {
  id               String   @id @default(uuid()) @db.Uuid
  shopId           String   @map("shop_id") @db.Uuid
  shop             Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  title            String
  shortDescription String?  @map("short_description")
  description      String?
  category         String?
  tags             String?
  price            Decimal  @db.Decimal(10, 2)
  estimatedPrice   Decimal? @map("estimated_price") @db.Decimal(10, 2)
  imageUrl         String?  @map("image_url")
  rating           Float    @default(0)
  status           String   @default("Live")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  
  // Search vector managed by trigger (not directly accessible via Prisma)
  // searchVector Unsupported("tsvector")?
  
  images      Image[]
  promptFiles PromptFile[]
  orders      Order[]
  reviews     Review[]

  @@index([shopId])
  @@index([category])
  @@index([status])
  @@map("prompts")
}

// Images table
model Image {
  id        String   @id @default(uuid()) @db.Uuid
  promptId  String   @map("prompt_id") @db.Uuid
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now()) @map("created_at")

  @@index([promptId])
  @@map("images")
}

// Prompt files table
model PromptFile {
  id         String   @id @default(uuid()) @db.Uuid
  promptId   String   @map("prompt_id") @db.Uuid
  prompt     Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  url        String
  promptText String?  @map("prompt_text")
  createdAt  DateTime @default(now()) @map("created_at")

  @@index([promptId])
  @@map("prompt_files")
}

// Orders table
model Order {
  id            String   @id @default(uuid()) @db.Uuid
  promptId      String   @map("prompt_id") @db.Uuid
  prompt        Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  buyerId       String   @map("buyer_id") @db.Uuid
  buyer         User     @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  paymentId     String?  @map("payment_id")
  paymentMethod String   @default("stripe") @map("payment_method")
  amount        Decimal  @db.Decimal(10, 2)
  status        String   @default("paid")
  createdAt     DateTime @default(now()) @map("created_at")

  @@index([buyerId])
  @@index([promptId])
  @@map("orders")
}

// Reviews table
model Review {
  id        String   @id @default(uuid()) @db.Uuid
  promptId  String   @map("prompt_id") @db.Uuid
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating    Int
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")

  @@index([promptId])
  @@index([userId])
  @@map("reviews")
}

// Banks table
model Bank {
  id            String   @id @default(uuid()) @db.Uuid
  sellerId      String   @map("seller_id") @db.Uuid
  seller        User     @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  bankName      String?  @map("bank_name")
  accountNumber String?  @map("account_number")
  routingNumber String?  @map("routing_number")
  createdAt     DateTime @default(now()) @map("created_at")

  @@index([sellerId])
  @@map("banks")
}

// Withdrawals table
model Withdrawal {
  id        String   @id @default(uuid()) @db.Uuid
  sellerId  String   @map("seller_id") @db.Uuid
  seller    User     @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  amount    Decimal  @db.Decimal(10, 2)
  status    String   @default("pending")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([sellerId])
  @@map("withdrawals")
}
